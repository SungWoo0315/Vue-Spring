package com.dream.controller;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.dream.service.BoardService;
import com.dream.vo.BoardVO;
import com.dream.vo.ResultVO;

//=============================
//CORS 오류를 해결
@CrossOrigin(origins = "*")
//=============================

@Controller
@RequestMapping("board/")
public class BoardController {

	private static final Logger logger = LoggerFactory.getLogger(BoardController.class);

	@Autowired
	BoardService service;

	@ResponseBody
	@RequestMapping(value = "get-board-list.do", method = RequestMethod.GET)
	public ResultVO getBoardList() 
	{	
		// 호출 시 찍히게 될 로그
		logger.info("[GET] getBoardList====");
		// 결과 값을 담을 ResultVO를 선언한 생성자를 통해서 만드는데 기본값은 success는 false, result는 null로 세팅
		ResultVO result = new ResultVO(false, null,"");

		try {
			/* System.out.println("try 통과"); */
			result.setResult(service.getBoardList());
			result.setSuccess(true);
		} catch (Exception e) {
			// TODO: handle exception
			logger.error("[Board] getBoardList : " + e.getMessage(), e);
		}

		return result;

	}
	
	@RequestMapping(value = "reg-board.do", method = RequestMethod.POST, produces = "application/json;charset=UTF8")
	@ResponseBody
	public ResultVO regBoard(@RequestParam(value="img" ,required = false) MultipartFile[] get_multi, @RequestBody BoardVO vo ) 
	{	
		
		logger.info("[POST] regBoard multi 확인===="+get_multi[0]);
		
		MultipartFile multi = get_multi[0];
		
		// 호출 시 찍히게 될 로그
		logger.info("[POST] regBoard====");
		// 결과 값을 담을 ResultVO를 선언한 생성자를 통해서 만드는데 기본값은 success는 false, result는 null로 세팅
		ResultVO result = new ResultVO(false, null,"");
		
        // **********************************************
        // 업로드 파일의 크기와 확장자 체크하기
        // **********************************************
        // 만약에 업로드된 파일이 있으면
        if( multi.isEmpty()==false ){
     
            // 만약에 업로드된 파일의 크기가 1000000 byte(=1000kb) 보다 크면 
            if( multi.getSize()>1000000){
                result.setMsg("msg\", \"업로드 파일이 10mb 보다 크면 업로드 할 수 없습니다.");
                return result;
            }

            // 파일 이름 가져오기 
            String fileName = multi.getOriginalFilename();

            // 만약에 업로드된 파일의 확장자가 이미지 확장자가 아니면 
            System.out.println("파일이름 확인하기 =>>> " + fileName);
            
            if( fileName.endsWith(".jpeg")==false && fileName.endsWith(".jpg")==false && fileName.endsWith(".gif")==false && fileName.endsWith(".png")==false ){
               
            	result.setMsg("msg\", \"이미지 파일 형식이 아닙니다.");
                return result;
            }
            
        }
		
        
        String msg = result.getMsg();
        	
		try {
			
			if( msg.equals("") ) {
				
				result.setResult(service.regBoard(vo));
				result.setSuccess(true);
			}
		} catch (Exception e) {
			// TODO: handle exception
			logger.error("[Board] getBoardList : " + e.getMessage(), e);
		}

		return result;
    		
        
		



	}

	
//	이미지 파일 업로드
//	참고 사이트
//	https://sinna94.tistory.com/entry/Spring-%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C-%ED%95%98%EA%B8%B0 
	@ResponseBody
	@RequestMapping(value = "file-upload.do", method = RequestMethod.POST, produces = "application/json;charset=UTF8")  
		public String uploadFile(MultipartFile[] fileList) { 
			// 호출 시 찍히게 될 로그
			logger.info("[POST] file-upload====");
			logger.info("[POST] file-isEmpty====> " + fileList[0].isEmpty());
			logger.info("[POST] file-name====> " + fileList[0].getOriginalFilename());
						
            String fileName = fileList[0].getOriginalFilename();

            logger.info("파일이름 확인하기 =>>> " + fileName);
            
			
			
			
			
			//파일이 업로드 될 경로 설정 
			String saveDir = "E:\\GitHub\\Vue-Spring\\new-tttt\\ex00\\src\\main\\webapp\\resources\\img\\";
//					request.getSession().getServletContext().getRealPath("/resources/upload/img"); 
			//위에서 설정한 경로의 폴더가 없을 경우 생성 
//			File dir = 
//					new File(saveDir); if(!dir.exists()) { dir.mkdirs(); } 
					
			logger.info("[POST] file dir====> " + saveDir);		
			

			// 파일 업로드 
//			for(MultipartFile f : fileList) { 
				if(!fileList[0].isEmpty()) { 
					logger.info("for 시작");
					// 기존 파일 이름을 받고 확장자 저장 
					String orifileName = fileList[0].getOriginalFilename(); 
					logger.info("[POST] file orifileName====> " + orifileName);	
					String ext = orifileName.substring(orifileName.lastIndexOf(".")); 
					logger.info("[POST] file ext====> " + ext);	
					
					// 이름 값 변경을 위한 설정 
					SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd-HHmmssSSS"); 
					logger.info("[POST] file sdf====> " + sdf);	
					int rand = (int)(Math.random()*1000);
					
					// 파일 이름 변경 
					String reName = sdf.format(System.currentTimeMillis()) + "_" + rand + ext; 
					logger.info("[POST] file reName====> " + reName);
					
					// 파일 저장 
					try {
						fileList[0].transferTo(new File(saveDir + "/" + reName)); 
						logger.info("[POST] file transferTo ====> commit ");	
					}
					catch (IllegalStateException | IOException e) {
						e.printStackTrace();
					} 
				}
				else {
					logger.info("길이가 없음.");
				}
//			} 
				
//			Map<String, String> map = new HashMap<String,String>();
			return "upload success"; 
//			return null;
//			return map;
		} 




	
	@ResponseBody
	@RequestMapping(value = "get-board-detail.do", method = RequestMethod.POST)
	public ResultVO getBoardDetail(@RequestBody BoardVO vo) 
	{	
		// 호출 시 찍히게 될 로그
		logger.info("[POST] getBoardDetail====");
		// 결과 값을 담을 ResultVO를 선언한 생성자를 통해서 만드는데 기본값은 success는 false, result는 null로 세팅
		ResultVO result = new ResultVO(false, null,"");

		try {
			result.setResult(service.getBoardDetail(vo));
			result.setSuccess(true);
		} catch (Exception e) {
			// TODO: handle exception
			logger.error("[Board] getBoardDetail : " + e.getMessage(), e);
		}

		return result;

	}
	
	
	@ResponseBody
	@RequestMapping(value = "edit-board.do", method = RequestMethod.POST)
	public ResultVO editBoard(@RequestBody BoardVO vo) 
	{	
		// 호출 시 찍히게 될 로그
		logger.info("[POST] editBoard====");
		// 결과 값을 담을 ResultVO를 선언한 생성자를 통해서 만드는데 기본값은 success는 false, result는 null로 세팅
		ResultVO result = new ResultVO(false, null,"");

		try {
			result.setResult(service.editBoard(vo));
			result.setSuccess(true);
		} catch (Exception e) {
			// TODO: handle exception
			logger.error("[Board] editBoard : " + e.getMessage(), e);
		}

		return result;

	}
	
	
	@ResponseBody
	@RequestMapping(value = "delete-board.do", method = RequestMethod.POST)
	public ResultVO deleteBoard(@RequestBody BoardVO vo) 
	{	
		// 호출 시 찍히게 될 로그
		logger.info("[POST] deleteBoard====");
		// 결과 값을 담을 ResultVO를 선언한 생성자를 통해서 만드는데 기본값은 success는 false, result는 null로 세팅
		ResultVO result = new ResultVO(false, null,"");

		try {
			result.setResult(service.deleteBoard(vo));
			result.setSuccess(true);
		} catch (Exception e) {
			// TODO: handle exception
			logger.error("[Board] deleteBoard : " + e.getMessage(), e);
		}

		return result;

	}
	
	
	
	
	
	
}